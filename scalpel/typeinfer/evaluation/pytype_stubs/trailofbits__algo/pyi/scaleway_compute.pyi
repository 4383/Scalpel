# (generated with --quick)

import __future__
from typing import Any, Callable, Dict, List, Optional, Tuple, Type, TypeVar, Union

ANSIBLE_METADATA: Dict[str, Union[str, List[str]]]
AnsibleModule: Any
DOCUMENTATION: str
EXAMPLES: str
PATCH_MUTABLE_SERVER_ATTRIBUTES: Tuple[str, str, str, str, str]
RETURN: str
SCALEWAY_LOCATION: Any
SCALEWAY_SERVER_STATES: Tuple[str, str, str, str, str]
SCALEWAY_TRANSITIONS_STATES: Tuple[str, str, str]
Scaleway: Any
__metaclass__: Type[type]
absolute_import: __future__._Feature
datetime: module
division: __future__._Feature
print_function: __future__._Feature
scaleway_argument_spec: Any
state_strategy: Dict[str, Callable[[Any, Any], Any]]
time: module
urlquote: Any

_T1 = TypeVar('_T1')

def absent_strategy(compute_api, wished_server) -> Tuple[bool, Dict[str, str]]: ...
def check_image_id(compute_api, image_id) -> None: ...
def core(module) -> None: ...
def create_server(compute_api, server) -> Any: ...
def fetch_state(compute_api, server) -> Any: ...
def find(compute_api, wished_server, per_page = ...) -> Any: ...
def main() -> None: ...
def perform_action(compute_api, server, action) -> Any: ...
def present_strategy(compute_api, wished_server) -> Tuple[bool, Any]: ...
def public_ip_payload(compute_api, public_ip: _T1) -> Optional[Dict[str, Union[bool, _T1]]]: ...
def remove_server(compute_api, server) -> Any: ...
def restart_server(compute_api, server) -> Any: ...
def restart_strategy(compute_api, wished_server) -> Tuple[bool, Any]: ...
def running_strategy(compute_api, wished_server) -> Tuple[bool, Any]: ...
def server_attributes_should_be_changed(compute_api, target_server, wished_server) -> Optional[bool]: ...
def server_change_attributes(compute_api, target_server, wished_server) -> Any: ...
def start_server(compute_api, server) -> Any: ...
def stop_server(compute_api, server) -> Any: ...
def stop_strategy(compute_api, wished_server) -> Tuple[bool, Any]: ...
def wait_to_complete_state_transition(compute_api, server) -> None: ...
