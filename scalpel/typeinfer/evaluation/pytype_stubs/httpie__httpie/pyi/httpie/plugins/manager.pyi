# (generated with --quick)

import httpie.plugins.base
import itertools
import operator
import pkg_resources
from typing import Dict, Generator, List, Optional, Type

AuthPlugin: Type[httpie.plugins.base.AuthPlugin]
BasePlugin: Type[httpie.plugins.base.BasePlugin]
ConverterPlugin: Type[httpie.plugins.base.ConverterPlugin]
ENTRY_POINT_NAMES: List[str]
FormatterPlugin: Type[httpie.plugins.base.FormatterPlugin]
TransportPlugin: Type[httpie.plugins.base.TransportPlugin]
attrgetter: Type[operator.attrgetter]
groupby: Type[itertools.groupby]

class PluginManager(list):
    def __repr__(self) -> str: ...
    def filter(self, by_type = ...) -> List[nothing]: ...
    def get_auth_plugin(self, auth_type: str) -> Type[httpie.plugins.base.AuthPlugin]: ...
    def get_auth_plugin_mapping(self) -> Dict[str, Type[httpie.plugins.base.AuthPlugin]]: ...
    def get_auth_plugins(self) -> List[Type[httpie.plugins.base.AuthPlugin]]: ...
    def get_converters(self) -> List[Type[httpie.plugins.base.ConverterPlugin]]: ...
    def get_formatters(self) -> List[Type[httpie.plugins.base.FormatterPlugin]]: ...
    def get_formatters_grouped(self) -> Dict[str, List[Type[httpie.plugins.base.FormatterPlugin]]]: ...
    def get_transport_plugins(self) -> List[Type[httpie.plugins.base.TransportPlugin]]: ...
    def load_installed_plugins(self) -> None: ...
    def register(self, *plugins: Type[httpie.plugins.base.BasePlugin]) -> None: ...
    def unregister(self, plugin: Type[httpie.plugins.base.BasePlugin]) -> None: ...

def iter_entry_points(group: str, name: Optional[str] = ...) -> Generator[pkg_resources.EntryPoint, None, None]: ...
