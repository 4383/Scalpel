# (generated with --quick)

import __future__
import builtins
from typing import Any, Callable, Dict, Iterable, List, Optional, Sized, Tuple, Type, TypeVar, Union

SECTION_TITLES: Dict[Any, Tuple[str, ...]]
absolute_import: __future__._Feature
collections: module
division: __future__._Feature
enum: module
print_function: __future__._Feature
re: module
textwrap: module

_T0 = TypeVar('_T0')
_TNamespace = TypeVar('_TNamespace', bound=Namespace)
_Tnamedtuple_ArgInfo_name_type_description = TypeVar('_Tnamedtuple_ArgInfo_name_type_description', bound=namedtuple_ArgInfo_name_type_description)
_Tnamedtuple_DocstringInfo_summary_description_args_returns_yields_raises = TypeVar('_Tnamedtuple_DocstringInfo_summary_description_args_returns_yields_raises', bound=namedtuple_DocstringInfo_summary_description_args_returns_yields_raises)

class ArgInfo(namedtuple_ArgInfo_name_type_description): ...

class DocstringInfo(namedtuple_DocstringInfo_summary_description_args_returns_yields_raises): ...

class Formats(enum.Enum):
    GOOGLE: int
    NUMPY: int
    RST: int

class KwargInfo(ArgInfo): ...

class Namespace(dict):
    __doc__: str
    args: List[nothing]
    current_arg: Any
    format: None
    indentation: Optional[int]
    kwargs: List[nothing]
    line: Any
    line1_indentation: None
    lines: List[nothing]
    name: Any
    permitted: bool
    remaining: Any
    remaining_raw: Any
    stripped: Any
    title: None
    def __delattr__(self, key) -> None: ...
    def __getattr__(self: _TNamespace, key) -> _TNamespace: ...
    def __setattr__(self, key, value) -> None: ...

class Sections(enum.Enum):
    ARGS: int
    RAISES: int
    RETURNS: int
    TYPE: int
    YIELDS: int

class namedtuple_ArgInfo_name_type_description(tuple):
    __slots__ = ["description", "name", "type"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str]
    description: Any
    name: Any
    type: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: builtins.type[_Tnamedtuple_ArgInfo_name_type_description], name = ..., type = ..., description = ...) -> _Tnamedtuple_ArgInfo_name_type_description: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: builtins.type[_Tnamedtuple_ArgInfo_name_type_description], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _Tnamedtuple_ArgInfo_name_type_description: ...
    def _replace(self: _Tnamedtuple_ArgInfo_name_type_description, **kwds) -> _Tnamedtuple_ArgInfo_name_type_description: ...

class namedtuple_DocstringInfo_summary_description_args_returns_yields_raises(tuple):
    __slots__ = ["args", "description", "raises", "returns", "summary", "yields"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str, str, str]
    args: Any
    description: Any
    raises: Any
    returns: Any
    summary: Any
    yields: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_Tnamedtuple_DocstringInfo_summary_description_args_returns_yields_raises], summary = ..., description = ..., args = ..., returns = ..., yields = ..., raises = ...) -> _Tnamedtuple_DocstringInfo_summary_description_args_returns_yields_raises: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_Tnamedtuple_DocstringInfo_summary_description_args_returns_yields_raises], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _Tnamedtuple_DocstringInfo_summary_description_args_returns_yields_raises: ...
    def _replace(self: _Tnamedtuple_DocstringInfo_summary_description_args_returns_yields_raises, **kwds) -> _Tnamedtuple_DocstringInfo_summary_description_args_returns_yields_raises: ...

def _as_arg_name_and_type(text) -> Optional[Tuple[Any, str]]: ...
def _as_arg_names(names_str) -> Optional[list]: ...
def _cast_to_known_type(name) -> Any: ...
def _consume_google_args_line(line_info, state) -> None: ...
def _consume_line(line_info, state) -> None: ...
def _create_line_info(line, next_line, previous_line) -> Namespace: ...
def _get_after_directive(line_info) -> Any: ...
def _get_after_google_header(line_info) -> Any: ...
def _get_directive(line_info) -> Any: ...
def _get_or_create_arg_by_name(state, name, is_kwarg = ...) -> Any: ...
def _google_section(line_info) -> Any: ...
def _google_section_permitted(line_info, state) -> Any: ...
def _is_arg_name(name) -> bool: ...
def _is_blank(line) -> Any: ...
def _join_lines(lines) -> Optional[str]: ...
def _line_is_hyphens(line: _T0) -> Union[bool, _T0]: ...
def _line_is_numpy_parameter_type(line_info) -> bool: ...
def _matches_section(title, section) -> bool: ...
def _matches_section_title(title, section_title) -> bool: ...
def _numpy_section(line_info) -> Any: ...
def _rst_section(line_info) -> Any: ...
def _section_from_possible_title(possible_title) -> Any: ...
def _strip_blank_lines(lines) -> Any: ...
def _update_section_state(line_info, state) -> None: ...
def parse(docstring) -> DocstringInfo: ...
