# (generated with --quick)

from typing import Any, Callable, Dict, Optional, TypeVar

doctest: module

_T = TypeVar('_T')

class NumObj:
    do_stuff: Callable
    value: Any
    def __init__(self, value) -> None: ...
    def __repr__(self) -> str: ...
    def increment(self) -> None: ...

class Transaction:
    __doc__: str
    deep: Any
    states: Any
    targets: tuple
    def __init__(self, deep, *targets) -> None: ...
    def commit(self) -> None: ...
    def rollback(self) -> None: ...

class Transactional:
    __doc__: str
    method: Any
    def __get__(self, obj, T) -> Callable: ...
    def __init__(self, method) -> None: ...

def copy(x: _T) -> _T: ...
def deepcopy(x: _T, memo: Optional[Dict[int, Any]] = ..., _nil = ...) -> _T: ...
def main() -> None: ...
def memento(obj, deep = ...) -> Callable[[], Any]: ...
