# (generated with --quick)

import __future__
from typing import Any, Callable, Iterator, List, Sequence, Tuple, TypeVar

absolute_import: __future__._Feature
caffe2_pb2: Any
copy: module
core: Any
division: __future__._Feature
np: module
print_function: __future__._Feature
unicode_literals: __future__._Feature
workspace: Any

_T = TypeVar('_T')
_T0 = TypeVar('_T0')
_T1 = TypeVar('_T1')
_T2 = TypeVar('_T2')

class OpFilter:
    cond: None
    input_has: None
    inputs: None
    output_has: None
    outputs: None
    reverse: bool
    type: None
    type_in: None
    def __init__(self, **kwargs) -> None: ...
    def check(self, op) -> bool: ...

def add_tensor(net, name, blob) -> None: ...
def blob_uses(net, blob) -> List[int]: ...
def compare_model(model1_func, model2_func, test_image, check_blobs) -> bool: ...
def convert_op_in_ops(ops_ref, func_or_list) -> None: ...
def convert_op_in_proto(proto, func_or_list) -> None: ...
def create_input_blobs_for_net(net_def) -> None: ...
def filter_op(op, **kwargs) -> bool: ...
def fuse_affine(net: _T0, params: _T1, ignore_failure) -> Tuple[_T0, _T1, list]: ...
def fuse_first_affine(net: _T0, params: _T1, removed_tensors: _T2) -> Tuple[_T0, _T1, _T2]: ...
def fuse_net(fuse_func, net, blobs, ignore_failure = ...) -> Tuple[Any, Any]: ...
def fuse_net_affine(net, blobs) -> Tuple[Any, Any]: ...
def gen_init_net_from_blobs(blobs, blobs_to_use = ..., excluded_blobs = ...) -> Any: ...
def get_device_option_cpu() -> Any: ...
def get_device_option_cuda(gpu_id = ...) -> Any: ...
def get_op_arg(op, arg_name) -> Any: ...
def get_op_arg_valf(op, arg_name, default_val) -> Any: ...
def get_ws_blobs(blob_names = ...) -> dict: ...
def op_filter(**filter_args) -> Callable[[Any], Any]: ...
def op_func_chain(convert_func_list) -> Callable[[Any], Any]: ...
def pairwise(iterable) -> Iterator[nothing]: ...
def save_graph(net, file_name, graph_name = ..., op_only = ...) -> None: ...
def update_mobile_engines(net) -> None: ...
def wraps(wrapped: Callable, assigned: Sequence[str] = ..., updated: Sequence[str] = ...) -> Callable[[_T], _T]: ...
