# (generated with --quick)

from typing import Any, Callable, List, Optional, Pattern, Sequence, Sized, Tuple, Type, TypeVar, Union, overload

CUR_OS: str
IS_NIX: bool
IS_WIN: bool
RE_ANSI: Pattern[str]
_basestring: Any
_range: Any
_unich: Any
_unicode: Any
colorama: Optional[module]
os: module
re: module
sys: module

_T = TypeVar('_T')

class CallbackIOWrapper(ObjectWrapper):
    def __init__(self, callback, stream, method = ...) -> None: ...

class Comparable:
    __doc__: str
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> bool: ...
    def __gt__(self, other) -> bool: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> bool: ...

class DisableOnWriteError(ObjectWrapper):
    __doc__: str
    def __eq__(self, other) -> Any: ...
    def __init__(self, wrapped, tqdm_instance) -> None: ...
    @staticmethod
    def disable_on_exception(tqdm_instance, func) -> Callable: ...

class FormatReplace:
    __doc__: str
    format_called: int
    replace: Any
    def __format__(self, _) -> Any: ...
    def __init__(self, replace = ...) -> None: ...

class ObjectWrapper:
    def __getattr__(self, name) -> Any: ...
    def __init__(self, wrapped) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def wrapper_getattr(self, name) -> Any: ...
    def wrapper_setattr(self, name, value) -> None: ...

class SimpleTextIOWrapper(ObjectWrapper):
    __doc__: str
    def __eq__(self, other) -> Any: ...
    def __init__(self, wrapped, encoding) -> None: ...
    def write(self, s) -> Any: ...

def _environ_cols_wrapper() -> Optional[Callable[[Any], Any]]: ...
def _is_ascii(s) -> Any: ...
def _is_utf(encoding) -> Any: ...
def _screen_shape_linux(fp) -> Union[List[int], Tuple[Optional[int], Optional[int]]]: ...
def _screen_shape_tput(*_) -> Union[List[int], Tuple[None, None]]: ...
def _screen_shape_windows(fp) -> Tuple[Any, Any]: ...
def _screen_shape_wrapper() -> Optional[Callable]: ...
def _supports_unicode(fp) -> Any: ...
def _term_move_up() -> str: ...
@overload
def _text_width(obj: Sized) -> int: ...
@overload
def _text_width(s) -> int: ...
def disp_len(data) -> Any: ...
def disp_trim(data, length) -> Any: ...
def east_asian_width(__chr: str) -> str: ...
@overload
def warn(message: Warning, category = ..., stacklevel: int = ..., source = ...) -> None: ...
@overload
def warn(message: str, category: Optional[Type[Warning]] = ..., stacklevel: int = ..., source = ...) -> None: ...
def wraps(wrapped: Callable, assigned: Sequence[str] = ..., updated: Sequence[str] = ...) -> Callable[[_T], _T]: ...
