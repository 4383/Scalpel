# (generated with --quick)

import depixlib.Rectangle
from typing import Any, Dict, List, Sequence, Tuple, Type, TypeVar

ColorRectange: Type[depixlib.Rectangle.ColorRectange]
Image: module
Rectangle: Type[depixlib.Rectangle.Rectangle]
RectangleMatch: Type[depixlib.Rectangle.RectangleMatch]
logging: module

_T = TypeVar('_T')

def choice(seq: Sequence[_T]) -> _T: ...
def dropEmptyRectangleMatches(rectangleMatches, pixelatedSubRectanges) -> list: ...
def findGeometricMatchesForSingleResults(singleResults, pixelatedSubRectanges, rectangleMatches) -> Tuple[Any, Any]: ...
def findRectangleMatches(rectangeSizeOccurences, pixelatedSubRectanges, searchImage, averageType = ...) -> Dict[Tuple[Any, Any], List[depixlib.Rectangle.RectangleMatch]]: ...
def findRectangleSizeOccurences(colorRectanges) -> Dict[Tuple[Any, Any], int]: ...
def findSameColorRectangle(pixelatedImage, startCoordinates, maxCoordinates) -> depixlib.Rectangle.ColorRectange: ...
def findSameColorSubRectangles(pixelatedImage, rectangle) -> List[depixlib.Rectangle.ColorRectange]: ...
def isNeighbor(pixelA, pixelB) -> Any: ...
def lin2srgb(lin) -> Any: ...
def removeMootColorRectangles(colorRectanges, editorBackgroundColor) -> list: ...
def splitSingleMatchAndMultipleMatches(pixelatedSubRectanges, rectangleMatches) -> Tuple[list, list]: ...
def srgb2lin(s) -> Any: ...
def writeAverageMatchToImage(pixelatedSubRectanges, rectangleMatches, searchImage, unpixelatedOutputImage) -> None: ...
def writeFirstMatchToImage(singleMatchRectangles, rectangleMatches, searchImage, unpixelatedOutputImage) -> None: ...
def writeRandomMatchesToImage(pixelatedSubRectanges, rectangleMatches, searchImage, unpixelatedOutputImage) -> None: ...
