# (generated with --quick)

import __future__
from typing import Any, Optional

division: __future__._Feature
itertools: module
np: module
print_function: __future__._Feature

class Apriori:
    __doc__: str
    freq_itemsets: Optional[list]
    min_conf: Any
    min_sup: Any
    transactions: Any
    def __init__(self, min_sup = ..., min_conf = ...) -> None: ...
    def _calculate_support(self, itemset) -> float: ...
    def _generate_candidates(self, freq_itemset) -> list: ...
    def _get_frequent_itemsets(self, candidates) -> list: ...
    def _has_infrequent_itemsets(self, candidate) -> bool: ...
    def _rules_from_itemset(self, initial_itemset, itemset) -> list: ...
    def _transaction_contains_items(self, transaction, items) -> bool: ...
    def find_frequent_itemsets(self, transactions) -> Any: ...
    def generate_rules(self, transactions) -> list: ...

class Rule:
    antecedent: Any
    concequent: Any
    confidence: Any
    support: Any
    def __init__(self, antecedent, concequent, confidence, support) -> None: ...
