# (generated with --quick)

import __future__
import itertools
import numpy
from typing import Any, Generator, List, Tuple, Type, TypeVar

combinations_with_replacement: Type[itertools.combinations_with_replacement]
division: __future__._Feature
math: module
np: module
sys: module

_T0 = TypeVar('_T0')

def batch_iterator(X, y = ..., batch_size = ...) -> Generator[Any, Any, None]: ...
def divide_on_feature(X, feature_i, threshold) -> numpy.ndarray: ...
def get_random_subsets(X, y, n_subsets, replacements = ...) -> List[list]: ...
def k_fold_cross_validation_sets(X, y, k, shuffle = ...) -> numpy.ndarray: ...
def make_diagonal(x) -> Any: ...
def normalize(X, axis = ..., order = ...) -> Any: ...
def polynomial_features(X, degree) -> Any: ...
def shuffle_data(X, y, seed = ...) -> Tuple[Any, Any]: ...
def standardize(X: _T0) -> _T0: ...
def to_categorical(x, n_col = ...) -> Any: ...
def to_nominal(x) -> Any: ...
def train_test_split(X, y, test_size = ..., shuffle = ..., seed = ...) -> Tuple[Any, Any, Any, Any]: ...
