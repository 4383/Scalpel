# (generated with --quick)

from typing import Any

np: module

class ELU:
    alpha: Any
    def __call__(self, x) -> Any: ...
    def __init__(self, alpha = ...) -> None: ...
    def gradient(self, x) -> Any: ...

class LeakyReLU:
    alpha: Any
    def __call__(self, x) -> Any: ...
    def __init__(self, alpha = ...) -> None: ...
    def gradient(self, x) -> Any: ...

class ReLU:
    def __call__(self, x) -> Any: ...
    def gradient(self, x) -> Any: ...

class SELU:
    alpha: float
    scale: float
    def __call__(self, x) -> Any: ...
    def __init__(self) -> None: ...
    def gradient(self, x) -> Any: ...

class Sigmoid:
    def __call__(self, x) -> Any: ...
    def gradient(self, x) -> Any: ...

class SoftPlus:
    def __call__(self, x) -> Any: ...
    def gradient(self, x) -> Any: ...

class Softmax:
    def __call__(self, x) -> Any: ...
    def gradient(self, x) -> Any: ...

class TanH:
    def __call__(self, x) -> Any: ...
    def gradient(self, x) -> Any: ...
