# (generated with --quick)

from typing import Any, Optional, Pattern, TypeVar, Union, overload

BLOCK: str
HTMLParser: Any
_quote: Any
b: str
config: module
copy: module
emojiRegex: Pattern[str]
friendInfoTemplate: dict
htmlParser: Any
k: str
logger: logging.Logger
logging: module
os: module
re: module
requests: module
subprocess: module
sys: module
traceback: module

_T1 = TypeVar('_T1')

def check_file(fileDir) -> bool: ...
def clear_screen() -> None: ...
def contact_deep_copy(core, contact: _T1) -> _T1: ...
def emoji_formatter(d, k) -> None: ...
def get_image_postfix(data) -> str: ...
def msg_formatter(d, k) -> None: ...
def print_cmd_qr(qrText, white = ..., black = ..., enableCmdQR = ...) -> None: ...
def print_line(msg, oneLine = ...) -> None: ...
def print_qr(fileDir) -> None: ...
@overload
def quote(n) -> Any: ...
@overload
def quote(string: str, safe: Union[bytes, str] = ..., encoding: Optional[str] = ..., errors: Optional[str] = ...) -> str: ...
@overload
def quote(string: bytes, safe: Union[bytes, str] = ...) -> str: ...
def search_dict_list(l, key, value) -> Any: ...
def struct_friend_info(knownInfo) -> dict: ...
def test_connect(retryTime = ...) -> Optional[bool]: ...
def update_info_dict(oldInfoDict, newInfoDict) -> None: ...
