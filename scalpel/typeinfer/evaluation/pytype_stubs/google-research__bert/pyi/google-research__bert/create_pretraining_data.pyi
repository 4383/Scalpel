# (generated with --quick)

import __future__
from typing import Any, Callable, Iterable, List, Sized, Tuple, Type, TypeVar

MaskedLmInstance = namedtuple_MaskedLmInstance_index_label

FLAGS: Any
absolute_import: __future__._Feature
collections: module
division: __future__._Feature
flags: Any
print_function: __future__._Feature
random: module
tf: Any
tokenization: Any

_Tnamedtuple_MaskedLmInstance_index_label = TypeVar('_Tnamedtuple_MaskedLmInstance_index_label', bound=namedtuple_MaskedLmInstance_index_label)

class TrainingInstance:
    __doc__: str
    is_random_next: Any
    masked_lm_labels: Any
    masked_lm_positions: Any
    segment_ids: Any
    tokens: Any
    def __init__(self, tokens, segment_ids, masked_lm_positions, masked_lm_labels, is_random_next) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

class namedtuple_MaskedLmInstance_index_label(tuple):
    __slots__ = ["index", "label"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str]
    index: Any
    label: Any
    def __getnewargs__(self) -> Tuple[Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_Tnamedtuple_MaskedLmInstance_index_label], index, label) -> _Tnamedtuple_MaskedLmInstance_index_label: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_Tnamedtuple_MaskedLmInstance_index_label], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _Tnamedtuple_MaskedLmInstance_index_label: ...
    def _replace(self: _Tnamedtuple_MaskedLmInstance_index_label, **kwds) -> _Tnamedtuple_MaskedLmInstance_index_label: ...

def create_float_feature(values) -> Any: ...
def create_instances_from_document(all_documents, document_index, max_seq_length, short_seq_prob, masked_lm_prob, max_predictions_per_seq, vocab_words, rng) -> List[TrainingInstance]: ...
def create_int_feature(values) -> Any: ...
def create_masked_lm_predictions(tokens, masked_lm_prob, max_predictions_per_seq, vocab_words, rng) -> Tuple[list, list, list]: ...
def create_training_instances(input_files, tokenizer, max_seq_length, dupe_factor, short_seq_prob, masked_lm_prob, max_predictions_per_seq, rng) -> List[TrainingInstance]: ...
def main(_) -> None: ...
def truncate_seq_pair(tokens_a, tokens_b, max_num_tokens, rng) -> None: ...
def write_instance_to_example_files(instances, tokenizer, max_seq_length, max_predictions_per_seq, output_files) -> None: ...
