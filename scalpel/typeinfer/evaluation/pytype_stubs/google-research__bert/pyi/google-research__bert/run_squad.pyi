# (generated with --quick)

import __future__
from typing import Any, Callable, Iterable, List, Sized, Tuple, Type, TypeVar, Union

RawResult = namedtuple_RawResult_unique_id_start_logits_end_logits

FLAGS: Any
absolute_import: __future__._Feature
collections: module
division: __future__._Feature
flags: Any
json: module
math: module
modeling: Any
optimization: Any
os: module
print_function: __future__._Feature
random: module
six: module
tf: Any
tokenization: Any

_T1 = TypeVar('_T1')
_T2 = TypeVar('_T2')
_Tnamedtuple_DocSpan_start_length = TypeVar('_Tnamedtuple_DocSpan_start_length', bound=namedtuple_DocSpan_start_length)
_Tnamedtuple_NbestPrediction_text_start_logit_end_logit = TypeVar('_Tnamedtuple_NbestPrediction_text_start_logit_end_logit', bound=namedtuple_NbestPrediction_text_start_logit_end_logit)
_Tnamedtuple_PrelimPrediction_feature_index_start_index_end_index_start_logit_end_logit = TypeVar('_Tnamedtuple_PrelimPrediction_feature_index_start_index_end_index_start_logit_end_logit', bound=namedtuple_PrelimPrediction_feature_index_start_index_end_index_start_logit_end_logit)
_Tnamedtuple_RawResult_unique_id_start_logits_end_logits = TypeVar('_Tnamedtuple_RawResult_unique_id_start_logits_end_logits', bound=namedtuple_RawResult_unique_id_start_logits_end_logits)

class FeatureWriter:
    __doc__: str
    _writer: Any
    filename: Any
    is_training: Any
    num_features: int
    def __init__(self, filename, is_training) -> None: ...
    def close(self) -> None: ...
    def process_feature(self, feature) -> None: ...

class InputFeatures:
    __doc__: str
    doc_span_index: Any
    end_position: Any
    example_index: Any
    input_ids: Any
    input_mask: Any
    is_impossible: Any
    segment_ids: Any
    start_position: Any
    token_is_max_context: Any
    token_to_orig_map: Any
    tokens: Any
    unique_id: Any
    def __init__(self, unique_id, example_index, doc_span_index, tokens, token_to_orig_map, token_is_max_context, input_ids, input_mask, segment_ids, start_position = ..., end_position = ..., is_impossible = ...) -> None: ...

class SquadExample:
    __doc__: str
    doc_tokens: Any
    end_position: Any
    is_impossible: Any
    orig_answer_text: Any
    qas_id: Any
    question_text: Any
    start_position: Any
    def __init__(self, qas_id, question_text, doc_tokens, orig_answer_text = ..., start_position = ..., end_position = ..., is_impossible = ...) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

class namedtuple_DocSpan_start_length(tuple):
    __slots__ = ["length", "start"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str]
    length: Any
    start: Any
    def __getnewargs__(self) -> Tuple[Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_Tnamedtuple_DocSpan_start_length], start, length) -> _Tnamedtuple_DocSpan_start_length: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_Tnamedtuple_DocSpan_start_length], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _Tnamedtuple_DocSpan_start_length: ...
    def _replace(self: _Tnamedtuple_DocSpan_start_length, **kwds) -> _Tnamedtuple_DocSpan_start_length: ...

class namedtuple_NbestPrediction_text_start_logit_end_logit(tuple):
    __slots__ = ["end_logit", "start_logit", "text"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str]
    end_logit: Any
    start_logit: Any
    text: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_Tnamedtuple_NbestPrediction_text_start_logit_end_logit], text, start_logit, end_logit) -> _Tnamedtuple_NbestPrediction_text_start_logit_end_logit: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_Tnamedtuple_NbestPrediction_text_start_logit_end_logit], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _Tnamedtuple_NbestPrediction_text_start_logit_end_logit: ...
    def _replace(self: _Tnamedtuple_NbestPrediction_text_start_logit_end_logit, **kwds) -> _Tnamedtuple_NbestPrediction_text_start_logit_end_logit: ...

class namedtuple_PrelimPrediction_feature_index_start_index_end_index_start_logit_end_logit(tuple):
    __slots__ = ["end_index", "end_logit", "feature_index", "start_index", "start_logit"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str, str]
    end_index: Any
    end_logit: Any
    feature_index: Any
    start_index: Any
    start_logit: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_Tnamedtuple_PrelimPrediction_feature_index_start_index_end_index_start_logit_end_logit], feature_index, start_index, end_index, start_logit, end_logit) -> _Tnamedtuple_PrelimPrediction_feature_index_start_index_end_index_start_logit_end_logit: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_Tnamedtuple_PrelimPrediction_feature_index_start_index_end_index_start_logit_end_logit], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _Tnamedtuple_PrelimPrediction_feature_index_start_index_end_index_start_logit_end_logit: ...
    def _replace(self: _Tnamedtuple_PrelimPrediction_feature_index_start_index_end_index_start_logit_end_logit, **kwds) -> _Tnamedtuple_PrelimPrediction_feature_index_start_index_end_index_start_logit_end_logit: ...

class namedtuple_RawResult_unique_id_start_logits_end_logits(tuple):
    __slots__ = ["end_logits", "start_logits", "unique_id"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str]
    end_logits: Any
    start_logits: Any
    unique_id: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_Tnamedtuple_RawResult_unique_id_start_logits_end_logits], unique_id, start_logits, end_logits) -> _Tnamedtuple_RawResult_unique_id_start_logits_end_logits: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[_Tnamedtuple_RawResult_unique_id_start_logits_end_logits], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> _Tnamedtuple_RawResult_unique_id_start_logits_end_logits: ...
    def _replace(self: _Tnamedtuple_RawResult_unique_id_start_logits_end_logits, **kwds) -> _Tnamedtuple_RawResult_unique_id_start_logits_end_logits: ...

def _check_is_max_context(doc_spans, cur_span_index, position) -> Any: ...
def _compute_softmax(scores) -> List[float]: ...
def _get_best_indexes(logits, n_best_size) -> List[int]: ...
def _improve_answer_span(doc_tokens, input_start: _T1, input_end: _T2, tokenizer, orig_answer_text) -> Tuple[Union[int, _T1], Union[int, _T2]]: ...
def convert_examples_to_features(examples, tokenizer, max_seq_length, doc_stride, max_query_length, is_training, output_fn) -> None: ...
def create_model(bert_config, is_training, input_ids, input_mask, segment_ids, use_one_hot_embeddings) -> Tuple[Any, Any]: ...
def get_final_text(pred_text, orig_text, do_lower_case) -> Any: ...
def input_fn_builder(input_file, seq_length, is_training, drop_remainder) -> Callable[[Any], Any]: ...
def main(_) -> None: ...
def model_fn_builder(bert_config, init_checkpoint, learning_rate, num_train_steps, num_warmup_steps, use_tpu, use_one_hot_embeddings) -> Callable[[Any, Any, Any, Any], Any]: ...
def read_squad_examples(input_file, is_training) -> List[SquadExample]: ...
def validate_flags_or_throw(bert_config) -> None: ...
def write_predictions(all_examples, all_features, all_results, n_best_size, max_answer_length, do_lower_case, output_prediction_file, output_nbest_file, output_null_log_odds_file) -> None: ...
