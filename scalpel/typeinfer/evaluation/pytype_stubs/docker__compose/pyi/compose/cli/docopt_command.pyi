# (generated with --quick)

from typing import Any, Dict, Iterable, Optional, Tuple, Union

DocoptExit: Any

class DocoptDispatcher:
    command_class: Any
    options: Any
    def __init__(self, command_class, options) -> None: ...
    @classmethod
    def get_command_and_options(cls, doc_entity, argv, options) -> Tuple[Optional[str], Dict[str, Any], Any]: ...
    def parse(self, argv) -> Tuple[Dict[str, Any], Any, Dict[str, Any]]: ...

class NoSuchCommand(Exception):
    command: Any
    supercommand: Any
    def __init__(self, command, supercommand) -> None: ...

def docopt(doc: str, argv: Optional[Union[str, Iterable[str]]] = ..., help: bool = ..., version = ..., options_first: bool = ...) -> Dict[str, Any]: ...
def docopt_full_help(docstring, *args, **kwargs) -> Dict[str, Any]: ...
def get_handler(command_class, command) -> Any: ...
def getdoc(object: object) -> Optional[str]: ...
