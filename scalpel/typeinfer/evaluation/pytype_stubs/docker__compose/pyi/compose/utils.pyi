# (generated with --quick)

import compose.errors
import json.decoder
from typing import Any, Dict, Generator, Optional, Tuple, Type, TypeVar, Union

DockerException: Any
MULTIPLIERS: Dict[str, Union[float, int]]
StreamParseError: Type[compose.errors.StreamParseError]
hashlib: module
json: module
json_decoder: json.decoder.JSONDecoder
log: logging.Logger
logging: module
ntpath: module
random: module
sdk_parse_bytes: Any

_T0 = TypeVar('_T0')

def build_string_dict(source_dict) -> Dict[Any, str]: ...
def filter_attached_for_up(items: _T0, service_names, attach_dependencies = ..., item_to_service_name = ...) -> Union[list, _T0]: ...
def generate_random_id() -> str: ...
def json_hash(obj) -> str: ...
def json_splitter(buffer) -> Optional[Tuple[Any, Any]]: ...
def json_stream(stream) -> Generator[Any, Any, None]: ...
def line_splitter(buffer, separator = ...) -> Optional[Tuple[Any, Any]]: ...
def microseconds_from_time_nano(time_nano) -> int: ...
def nanoseconds_from_time_seconds(time_seconds) -> int: ...
def parse_bytes(n) -> Any: ...
def parse_nanoseconds_int(value) -> Optional[int]: ...
def parse_seconds_float(value) -> Any: ...
def split_buffer(stream, splitter = ..., decoder = ...) -> Generator[Any, Any, None]: ...
def splitdrive(path: _T0) -> Tuple[Any, Any]: ...
def stream_as_text(stream) -> Generator[Any, Any, None]: ...
def timeparse(sval) -> Any: ...
def truncate_id(value) -> Any: ...
def truncate_string(s, max_chars = ...) -> Any: ...
def unique_everseen(iterable, key = ...) -> Generator[Any, Any, None]: ...
def unquote_path(s) -> Any: ...
